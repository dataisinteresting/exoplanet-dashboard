from django.db import models
from django.db.models import FloatField


# Create your models here.
class Planets(models.Model)
    """A class definining a model for planetary systems"""
    # Fields - Field names and descriptions are adapted from those appearing at NASA's exoplanet archive's
    # planetary systems table:
    # https://exoplanetarchive.ipac.caltech.edu/cgi-bin/TblView/nph-tblView?app=ExoTbls&config=PS

    # Basic parameters
    hostname = models.CharField(primary_key = True, help_text = 'Host name most commonly used in literature')
    pl_name = models.CharField(help_text = 'Planet name most commonly used in literature')
    pl_letter = models.CharField(help_text = 'Letter assigned to the planetary component of a system')
    hd_name = models.CharField(help_text = 'Name of the star as given by the Henry Draper Catalog')
    hip_name = models.CharField(help_text = 'Name of the star as given by the Hipparcos Catalog')
    tic_id = models.CharField(help_text = 'Name of the star as given by the TESS Input Catalog')
    gaia_id = models.CharField(help_text = 'Name of the star as given by the Gaia Catalog')
    default_flag = models.BooleanField(help_text = 'Boolean flag indicating whether a given set of planet parameters have been selected by default.')
    sy_snum =  models.IntegerField(help_text = 'Number of stars in the planetary system')
    sy_pnum = models.IntegerField(help_text = 'Number of planets in the planetary system')
    sy_mnum = models.IntegerField(help_text = 'Number of moons in the planetary system')
    cb_flag = models.BooleanField(help_text = 'Boolean  indicating the whether the planet orbits a binary system')

    # Discovery parameters
    discoverymethod = models.CharField(help_text = 'Method by which the planet was first identified')
    disc_year = models.DateField(help_text = 'Year the planet was discovered')
    disc_refname = models.CharField(help_text = 'Reference name for the discovery publication')
    disc_pubdate = models.DateField(help_text = 'Publication date of the discovery publication')
    disc_locale = models.CharField(max_length=6, help_text = 'Location of observation of planet discovery (ground or space)')
    disc_facility models.CharField(help_text = 'Name of the facility of planet discovery observations')
    disc_telescope models.CharField(help_text = 'Name of the telescope of planet discovery observations')
    disc_instrument = models.CharField(help_text = 'Name of the instrument of planet discovery observations')
    rv_flag = models.BooleanField(help_text = 'Boolean indicating if the planet was detected by radial velocity variations')
    pul_flag = models.BooleanField(help_text = 'Boolean indicating if the planet was detected by pulsar timing variations')
    ptv_flag = models.BooleanField(help_text = 'Boolean indicating if the planet was detected by pulsation timing variations')
    tran_flag = models.BooleanField(help_text = 'Boolean indicating if the planet was detected via transits')
    ast_flag = models.BooleanField(help_text = 'Boolean indicating if the planet was detected via astrometric variations')
    obm_flag = models.BooleanField(help_text = 'Boolean indicating if the planet was detected via orbital brightness modulations')
    micro_flag = models.BooleanField(help_text = 'Boolean indicating if the planet was detected via microlensing')
    etv_flag = models.BooleanField(help_text = 'Boolean indicating if the planet was detected via eclipse timing variations')
    ima_flag = models.BooleanField(help_text = 'Boolean indicating if the planet was detected via imaging techniques')
    dkin_flag = models.BooleanField(help_text = 'Boolean indicating if the planet was detected via disk kinematics')
    soltype = models.CharField(help_text = 'Disposition of the planet (confirmed, candidate, etc.)')

    # Planetary parameters
    pl_controv_flag = models.BooleanField(help_text = 'Boolean indicating whether confirmation of the planet has been questioned in published literature')
    pl_refname = models.CharField(help_text = 'Reference of publication used for given planet parameters')
    pl_orbper = models.FloatField(help_text = 'Orbital period of the planet, in days')
    pl_orbsmax = models.FloatField(help_text = 'The longest radius of an elliptical orbit')
    pl_rade = models.FloatField(help_text = 'Distance from the center of the planet to its surface, in Earth radii')
    pl_radj = models.FloatField(help_text = 'Distance from the center of the planet to its surface, in Jupiter radii')
    pl_masse = models.FloatField(help_text = 'Mass of the planet, in Earth masses')
    pl_massj = models.FloatField(help_text = 'Mass of the planet, in Jupiter masses')
    pl_msinie = models.FloatField(help_text = 'Minimum mass of the planet as measured by radial velocity, in Earth masses')
    pl_msinij = models.FloatField(help_text = 'Minimum mass of the planet as measured by radial velocity, in Jupiter masses')
    pl_cmasse = models.FloatField(help_text = 'Calculated quotient of the lower limit of planet mass, in Earth masses')
    pl_cmassj = models.FloatField(help_text = 'Calculated quotient of the lower limit of planet mass, in Jupiter masses')
    pl_bmasse = models.FloatField(help_text = 'Best planet mass estimate available, in Earth masses')
    pl_bmassj = models.FloatField(help_text = 'Best planet mass estimate available, in Jupiter masses')
    pl_bmassprov = models.CharField(help_text = 'Method used for the best available estimate of planet mass')
    pl_dens = models.FloatField(help_text = 'Density of the planet, in g/cm**3')
    pl_orbeccen = models.FloatField(help_text = 'The amount by which the orbit of the planet deviates from a perfect circle'
    pl_insol = models.FloatField(help_text = 'Insolation flux, relative to Earth flux')
    pl_eqt = models.FloatField(help_text = 'Equilibrium temperature as modeled by a black body, in Kelvin')
    pl_orbincl = models.FloatField(help_text = 'Angle of the orbital plane relative to the plane perpendicular to line of sight from Earth to the planet, in degrees') ')
    pl_tranmid = models.FloatField(help_text = 'Time of conjunction (transit midpoint), assumed to be in Julian days')
    pl_tsystemref = models.CharField(help_text = 'Time system referenced for temporal and orbital parameters')
    ttv_flag = models.BooleanField(help_text = 'Boolean indicating whether the planet exhibits transit timing variations from another planet in the system')
    pl_imppar = models.FloatField(help_text = 'The sky-projected distance between the center of the  stellar disc and the center of the planet disc at conjunction, normalized by the stellar radius')
    pl_trandep = models.FloatField(help_text = 'The size of the relative flux decrement caused by the orbiting body transiting in front of the star')
    pl_trandur = models.FloatField(help_text = 'Duration of transit, in hours')
    pl_ratdor = models.FloatField(help_text = 'Distance from planet to star at transit midpoint, divided by stellar radius')
    pl_ratror = models.FloatField(help_text = 'The planet radius divided by the stellar radius')
    pl_occdep = models.FloatField(help_text = 'Depth of occultation of secondary eclipse ')
    pl_orbtper models.FloatField(help_text = 'The time of periastron passage')
    pl_orblper = models.FloatField(help_text = 'The angular separation between the ascending node and periastron of the orbit. Note: there are a varying conventions in the exoplanet literature regarding argument of periastron (or periapsis). For example, some publications refer the planet orbit, others to the host reflex orbit, which differs by 180 deg. The values in the Exoplanet Archive are not corrected to a standardized system, but are as-reported for each publication.')
    pl_rvamp = models.FloatField(help_text = 'Half the peak-to-peak amplitude of variability in the stellar radial velocity, in meters per second')
    pl_projobliq = models.FloatField(help_text = 'Projected obliquity, in degrees')
    pl_trueobliq = models.FloatField(help_text = 'True obliquity, in degrees')

    # Stellar parameters
    st_refname = models.CharField(help_text = 'Reference of the publication used to source stellar parameters')
    st_spectype = models.CharField(help_text = 'Spectral classification of the star, based on the Morgan-Keenan system')
    st_teff = models.FloatField(help_text = 'Stellar effective temperature, in Kelvin')
    st_rad = models.FloatField(help_text = 'Stellar radius, in Solar Radii')
    st_mass = models.FloatField(help_text = 'Stellar mass, in Solar masses'
    st_met = models.FloatField(help_text = 'Stellar metallicity')
    st_metratio = models.CharField(help_text = 'Ratio for stellar metalicity')
    st_lum = models.FloatField(help_text = 'Luminosity of the star, in Solar luminosities')
    st_logg = models.FloatField(help_text = 'Gravitation acceleration at the surface of the star')
    st_age = models.FloatField(help_text = 'Age of the host star, in Gyr'))
    st_dens = models.FloatField(help_text = 'Density of the host star, in g/cm**3')
    st_vsin = models.FloatField(help_text = 'Rotational velocity of the host star at its equator, in km/s')
    st_rotp = models.FloatField(help_text = 'Time required for star to complete one rotation, in days')
    st_radv = models.FloatField(help_text = 'velocity of the star in the direction of line of sight, in km/s')
    sy_refname = models.CharField(help_text ='Reference name of the publication used to source the system parameter values')
    rastr = models.FloatField(help_text = 'Right ascension of the planetary system in sexagesimal format')
    ra = models.FloatField(help_text = 'Right ascension of the planetary system in decimal degrees')
    decstr = models.FloatField(help_text = 'Declination of the planetary system in sexagesimal format')
    dec = models.FloatField(help_text = 'Declination of the planetary system in decimal degrees')
    glat = models.FloatField(help_text = 'Galactic latitude of the planetary system in units of decimal degrees')
    glon = models.FloatField(help_text = 'Galactic longtitude of the planetary system in units of decimal degrees')
    elat = models.FloatField(help_text = 'Ecliptic latitude of the planetary system in units of decimal degrees')
    elon = models.FloatField(help_text = 'Ecliptic longitude of the planetary system in units of decimal degrees')
    sy_pm = models.FloatField(help_text = 'Angular change in position over time as seen from the center of mass of the Solar system')
    sy_pmra = models.FloatField(help_text = 'Angular change in right ascension over time as seen from the center of mass of the Solar system')
    sy_pmdec = models.FloatField(help_text = 'Angular change in declination over time as seen from the center of the mass of the Solar system')
    sy_dist = models.FloatField(help_text= 'Distance to the planetary system in parsecs')
    sy_plx = models.FloatField(help_text= 'Difference in angular position of the star as measured at two opposite positions within orbit of Earth)
    sy_bmag = models.FloatField(help_text= 'Brightness of the host star as measured using the B (Johnson) band in units of magnitudes')
    sy_vmag = models.FloatField(help_text= 'Brightness of the host star as measured using the V (Johnson) band in units of magnitudes')
    sy_jmag = models.FloatField(help_text= 'Brightness of the host star as measured using the J (2MASS) band in units of magnitudes')
    sy_hmag = models.FloatField(help_text= 'Brightness of the host star as measured using the H (2MASS) band in units of magnitudes')
    sy_kmag = models.FloatField(help_text= 'Brightness of the host star as measured using the K (2MASS) band in units of magnitudes')
    sy_umag = models.FloatField(help_text= 'Brightness of the host star as measured using the Sloan Digital Sky Survey (SDSS) u band, in units of magnitudes')
    sy_gmag = models.FloatField(help_text= 'Brightness of the host star as measured using the Sloan Digital Sky Survey (SDSS) g band, in units of magnitudes')
    sy_rmag = models.FloatField(help_text= 'Brightness of the host star as measured using the Sloan Digital Sky Survey (SDSS) r band, in units of magnitudes')
    sy_imag = models.FloatField(help_text= 'Brightness of the host star as measured using the Sloan Digital Sky Survey (SDSS) i band, in units of magnitudes')
    sy_zmag = models.FloatField(help_text= 'Brightness of the host star as measured using the Sloan Digital Sky Survey (SDSS) z band, in units of magnitudes')
    sy_w1mag = models.FloatField(help_text= 'Brightness of the host star as measured using the 3.4um (WISE) band in units of magnitudes')
    sy_w2mag = models.FloatField(help_text= 'Brightness of the host star as measured using the 4.6um (WISE) band in units of magnitudes')
    sy_w3mag = models.FloatField(help_text= 'Brightness of the host star as measured using the 12.um (WISE) band in units of magnitudes')
    sy_w4mag = models.FloatField(help_text= 'Brightness of the host star as measured using the 22.um (WISE) band in units of magnitudes')
    sy_gaiamag = models.FloatField(help_text= 'Brightness of the host star as measuring using the Gaia band in units of magnitudes. Objects matched to Gaia using the Hipparcos or 2MASS IDs provided in Gaia DR2')
    sy_icmag = models.FloatField(help_text= 'Brightness of the host star as measured using the I (Cousins) band in units of magnitudes')
    sy_tmag = models.FloatField(help_text= 'Brightness of the host star as measured using the TESS bandpass, in units of magnitudes')
    sy_kepmag = models.FloatField(help_text= 'Brightness of the host star as measured using the Kepler bandpass, in units of magnitudes')

    # Dates
    rowupdate = models.DateField(help_text= 'Date of last update of the planet parameters')
    pl_pubdate = models.DateField(help_text= 'Date of the publication of the given planet parameter set')
    releasedate = models.DateField(help_text= 'Date that the given planet parameter set was publicly released by the NASA Exoplanet Archive')

    # Additional data
    pl_nnotes = models.IntegerField(help_text= 'Number of notes associated with the planet')
    st_nphot = models.IntegerField(help_text= 'Number of photometric time series records, including planet transit light curves, general transit light curves, and amateur light curves')
    st_nrvc = models.IntegerField(help_text= 'Number of literature radial velocity curves available for this star in the NASA Exoplanet Archive')
    st_nspec = models.IntegerField(help_text= 'Number of literature transmission spectrum measurements for this star in the NASA Exoplanet Archive')
    pl_nespec = models.IntegerField(help_text= 'Number of literature emission spectrum measurements for this star in the NASA Exoplanet Archive')
    pl_ntranspec = models.IntegerField(help_text= 'Number of literature spectra available for this star in the NASA Exoplanet Archive')

